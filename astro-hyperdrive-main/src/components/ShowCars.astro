---
import type { ShowCarsProps as Props } from "~/types";
import { getCollection, getEntries } from "astro:content";
import CardCarAlt from "~/components/car/CardCarAlt.astro";
import CardCar from "~/components/car/CardCar.astro";
import type { CollectionEntry } from "astro:content";
type Car = CollectionEntry<"cars">;

const { recent = false, featured = false, slugs = [], ui = "list" } = Astro.props;

let cars = [];

if (recent) {
	cars = await getCollection("cars", ({ data }) => !data.misc?.hidden);
	cars.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());
	cars = cars.slice(0, 3);
} else if (featured) {
	const allFeaturedCars = await getCollection("cars", ({ data }) => data.misc?.featured && !data.misc?.hidden);
	cars = allFeaturedCars.sort(() => 0.5 - Math.random()).slice(0, 3);
} else if (slugs.length > 0) {
	const references = slugs.map((slug) => ({ collection: "cars" as const, id: slug }));
	cars = await getEntries(references);
	cars = cars.filter((car): car is Car => car !== undefined && !car.data.misc?.hidden);
} else {
	return;
}

const wrapperClasses = {
	list: "grid grid-cols-1 gap-8",
	grid: "grid grid-cols-1 gap-8 lg:grid-cols-3",
};
---

<ul class={wrapperClasses[ui]}>
	{cars.map((car) => (ui === "grid" ? <CardCarAlt car={car} /> : <CardCar car={car} />))}
</ul>
