---
import type { Testimonial } from "~/types";
import { getCollection } from "astro:content";
import CardTestimonial from "~/components/CardTestimonial.astro";

const testimonials = (await getCollection("testimonials")) as Testimonial[];
const selectedTestimonials = testimonials.sort(() => Math.random() - 0.5).slice(0, 6);

if (!selectedTestimonials) {
	throw new Error("No testimonials found");
}
---

<div class="embla-testimonials max-w-full m-auto">
	<div class="embla__viewport overflow-hidden">
		<div class="embla__container flex touch-pinch-zoom">
			{
				selectedTestimonials.map((testimonial) => (
					<div class="embla__slide cursor-pointer select-none min-w-0 basis-full lg:basis-1/3 shrink-0 grow-0 [transform:_translate3d(0,_0,_0)]">
						<CardTestimonial testimonial={testimonial} />
					</div>
				))
			}
		</div>
	</div>

	<div class="embla__controls flex gap-4 mt-8 justify-between max-w-max mx-auto">
		<div class="embla__dots flex flex-wrap justify-end items-center"></div>
	</div>
</div>

<script>
	import EmblaCarousel, { type EmblaOptionsType, type EmblaCarouselType } from "embla-carousel";
	import { addDotBtnsAndClickHandlers } from "~/utils/EmblaCarouselDotButton";
	import Autoplay from "embla-carousel-autoplay";

	document.addEventListener("astro:page-load", function () {
		const OPTIONS: EmblaOptionsType = { loop: true, skipSnaps: true };
		const emblaNode = document.querySelector(".embla-testimonials") as HTMLElement;

		if (emblaNode) {
			const viewportNode = emblaNode.querySelector(".embla__viewport") as HTMLElement;
			const dotsNode = emblaNode.querySelector(".embla__dots") as HTMLElement;
			const emblaApi = EmblaCarousel(viewportNode, OPTIONS, [
				Autoplay({ delay: 3000, stopOnInteraction: false }),
			]);

			const onNavButtonClick = (emblaApi: EmblaCarouselType): void => {
				const autoplay = emblaApi?.plugins()?.autoplay;
				if (!autoplay) return;
				const resetOrStop = autoplay.options.stopOnInteraction === false ? autoplay.reset : autoplay.stop;
				resetOrStop();
			};

			const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(emblaApi, dotsNode, onNavButtonClick);
			emblaApi.on("destroy", removeDotBtnsAndClickHandlers);
		}
	});
</script>
